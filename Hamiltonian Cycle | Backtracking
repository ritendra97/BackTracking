Hamiltonian Cycle | Backtracking
import java.util.*;
public class Backtracking 
{
	public static boolean isSafe(int v,int graph[][],int path[],int pos)
	{
		if(graph[path[pos-1]][v]==0)
			return false;
		for(int i=0;i<pos;i++)
			if(path[i]==v)
				return false;
		return true;
	}
	public static boolean hamiltonionpathcycleUtil(int graph[][],int path[],int pos,int V)
	{
		if (pos == V) 
        { 
            if (graph[path[pos - 1]][path[0]] == 1) 
                return true; 
            else
                return false; 
        }
		for(int v=1;v<V;v++)
		{
			if(isSafe(v,graph,path,pos))
			{
				path[pos]=v;
				if(hamiltonionpathcycleUtil(graph,path,pos+1,V)==true)
					return true;
				path[pos]=-1;
			}
		}
		return false;
	}
	public static void hamiltonionpathcycle(int graph[][])
	{
		int V = graph.length;
		int path[] = new int[V];
		for(int i=0;i<V;i++)
		{
			path[i]=-1;
		}
		path[0]=0;
		if(hamiltonionpathcycleUtil(graph,path,1,V)==false)
			System.out.println("No path exist:");
		else
			printSolution(path,V);

	}
	public static void printSolution(int path[],int V) 
    { 
        System.out.println("Solution Exists: Following" +" is one Hamiltonian Cycle"); 
        for (int i = 0; i < V; i++) 
            System.out.print(" " + path[i] + " "); 
        System.out.println(" " + path[0] + " "); 
    }
	public static void main(String[] args) 
	{
		int graph[][] = {{0, 1, 0, 1, 0}, 
	                     {1, 0, 1, 1, 1}, 
	                     {0, 1, 0, 0, 1}, 
	                     {1, 1, 0, 0, 1}, 
	                     {0, 1, 1, 1, 0},};
		hamiltonionpathcycle(graph);
	}

}
